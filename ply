#!/usr/bin/env python3

import os, re, json, argparse

parser = argparse.ArgumentParser(description="Play some anime my dude",)
parser.add_argument("-n","--no-update", help="Prevents updating of complete.json", action="store_true")
parser.add_argument("-e","--episode", help="Play a specified episode", nargs=1, metavar="FILE", default=[None])
args = parser.parse_args()
print(vars(args))
#print(args.episode[0])

validExt = ['.mkv','.mp4','.avi','.m4v']

def getExt( filename ):
    basestring = str( filename )
    extension = ''
    for chara in range(len(basestring)-1, 0, -1):
        if basestring[chara] == '.':
            extension = basestring[chara:]
            return extension
    return extension

def isValidFile( filename ):
    for ext in validExt:
        if getExt(filename) == ext:
            return True
    return False

def createCompl( epNum = None ): #creates the complete.json file to keep track of episodes
    try:
        compW = open("complete.json", "w")
        if os.path.isfile("complete"): #converts old complete file to json format
            oldCompl = open("complete", 'r')
            epNum = int(oldCompl.read()) + 1
            oldCompl.close()
            os.remove("complete")
        if epNum is not None:
            baseCompl['Episode'] = int(epNum) - 1
        compW.write(json.dumps(baseCompl, indent = 4))
        compW.close()
        return True
    except:
        return False

def updateComplJson( jsonFile ):
    if not args.no_update:
        compW = open("complete.json", "w")
        compW.write(json.dumps(jsonFile, indent = 4))
        compW.close()

def getComplJson():
    try:
        compR = open("complete.json","r")
        compFile = compR.read()
        return json.loads(compFile)
    except:
        createCompl()
        return getComplJson()

def isStandard( filename ): #Checks to see if a filename matches the standard layout
    if re.search("\[(.*)\] (.*) - (\d{1,3}\.?5?) \[(\d{1,4}[p,K,k])\]\.(.*)", filename) is None:
        #print("Failed to Match: "+filename)
        return False, None
    else:
        standardMatch = re.match("\[(.*)\] (.*) - (\d{1,3}\.?5?) \[(\d{1,4}[p,K,k])\]\.(.*)", filename)
        #setBaseCompl( standardMatch )
        return True, standardMatch

def setBaseCompl( match ):
    baseCompl["Subber"] = match.group(1)
    baseCompl["Anime"] = match.group(2)
    baseCompl["Episode"] = float(match.group(3))
    baseCompl["Resolution"] = match.group(4)

def getSeriesTitle( filename ): #gets the title of a series for standard formatted shows
    bool, matchReg = isStandard( filename )
    return matchReg.group(2)

def getEpisodeNumber( filename ): #gets the episode number for standard formatted shows
    matchReg = 0.0
    bool, matchReg = isStandard( filename )
    #print("MatchReg: "+str(matchReg.group(3)))
    return float(matchReg.group(3))

def getSubberName( filename ):
    bool, matchReg = isStandard( filename )
    return matchReg.group(1)

def getExtension( filename ):
    bool, matchReg = isStandard( filename )
    return matchReg.group(5)

def getResolution( filename ):
    bool, matchReg = isStandard( filename )
    return matchReg.group(4)

def constructStandard(subber, anime, episode, resolution, extension):
    return '['+subber+'] '+anime+' - '+str(episode)+' ['+resolution+'].'+extension

def getNextEpisode( jsonFile ):
    global validFiles
    sample = validFiles[0]
    ext = getExtension(sample)
    currEp = float(jsonFile["Episode"])
    #print('isInteger: '+str(currEp.is_integer()))
    if currEp.is_integer():
        if os.path.isfile(constructStandard(jsonFile["Subber"], jsonFile["Anime"],str(currEp+0.5).zfill(4),jsonFile["Resolution"],ext)):
            return constructStandard(jsonFile["Subber"], jsonFile["Anime"],str(currEp+0.5).zfill(4),jsonFile["Resolution"],ext)
        elif os.path.isfile(constructStandard(jsonFile["Subber"], jsonFile["Anime"],str(int(currEp+1)).zfill(2),jsonFile["Resolution"],ext)):
            return constructStandard(jsonFile["Subber"], jsonFile["Anime"],str(int(currEp+1)).zfill(2),jsonFile["Resolution"],ext)
    else:
        return constructStandard(jsonFile["Subber"], jsonFile["Anime"],str(int(currEp+0.5)).zfill(2),jsonFile["Resolution"],ext)


baseCompl = {
    "Subber": None,
    "Anime": None,
    "Description": None,
    "Episode": 0,
    "UsePosIndex": False,
    "Resolution": None
}

files = [f for f in os.listdir() if os.path.isfile(f)]

validFiles = []
for item in files:
    if isValidFile(item):
        validFiles.append(item)


if isStandard(validFiles[0]): #Sorts the list by the numerical value of each episode
    unSortedFiles = []
    for item in validFiles:
        unSortedFiles.append(getEpisodeNumber(item))
    unSortedFiles.sort()
    for num in unSortedFiles:
        for ep in validFiles:
            if num == getEpisodeNumber(ep):
                validFiles.insert(unSortedFiles.index(num),validFiles.pop(validFiles.index(ep)))
else:
    validFiles.sort()


#for files in validFiles:
#    bool, yomom = isStandard(files)
#    print(constructStandard(yomom.group(1),yomom.group(2),yomom.group(3),yomom.group(4),yomom.group(5)))


sampleFile = validFiles[0]

if args.episode[0] is not None:
    #print(args.episode[0])
    print("Now Playing " + args.episode[0])
    os.system("mpv " + ' --really-quiet ' + "'" + args.episode[0]+"'")
    if isStandard(args.episode[0]):
        complJson = getComplJson()
        complJson['Episode'] = getEpisodeNumber(args.episode[0])
        updateComplJson(complJson)
else:
    if isStandard(sampleFile) and not os.path.isfile("complete.json"):
        if int(getEpisodeNumber(sampleFile)) > 1:
            print("WARNING: Episode count does not start at 1!\nSetting starting Episode at "+str(getEpisodeNumber(sampleFile))+".\nIf this is in error, please manually adjust in complete.json and/or set UsePosIndex to True.")
        createCompl(float(getEpisodeNumber(sampleFile)))

    complJson = getComplJson()
    if complJson['Anime'] is None and complJson['UsePosIndex'] == False:
        if isStandard(sampleFile):
            complJson['Subber'] = getSubberName(sampleFile)
            complJson['Anime'] = getSeriesTitle(sampleFile)
            complJson['Resolution'] = getResolution(sampleFile)
            complJson['UsePosIndex'] = False
            updateComplJson(complJson)
            complJson = getComplJson()
        else:
            complJson['UsePosIndex'] = True

    if complJson['UsePosIndex']:
        if complJson['Episode'] >= len(validFiles):
            print("There are no more valid file to be played.")
        else:
            print("Now Playing " + validFiles[complJson["Episode"]] + " ...")
            os.system("mpv "+' --really-quiet "'+validFiles[complJson['Episode']]+'"')
            complJson['Episode'] = complJson['Episode'] + 1
            updateComplJson(complJson)
    else:
        try:
            nextEp = os.path.isfile(getNextEpisode(complJson))
        except TypeError:
            nextEp = None

        if nextEp is None:
            print("There are no more valid files to be played.")
        else:
            print("Now Playing "+getNextEpisode(complJson))
            os.system("mpv "+' --really-quiet '+"'"+getNextEpisode(complJson)+"'*")
            complJson['Episode'] = getEpisodeNumber(getNextEpisode(complJson))
            updateComplJson(complJson)
